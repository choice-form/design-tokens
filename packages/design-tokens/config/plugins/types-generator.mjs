export default function typesGenerator(userOptions = {}) {
  return {
    name: "types-generator",
    enforce: "post", // 在其他插件之后运行

    async build({ tokens, getTransforms, outputFile }) {
      try {
        // 获取所有带透明度的颜色 transforms
        const colorTransforms = getTransforms({ format: "js-with-alpha" });
        const groupedTokens = {};

        // 按 token ID 分组
        for (const transform of colorTransforms) {
          if (!groupedTokens[transform.localID]) {
            groupedTokens[transform.localID] = {};
          }
          groupedTokens[transform.localID][transform.mode] = JSON.parse(
            transform.value
          );
        }

        const typeOutput = [];

        // 生成文件头
        typeOutput.push("/** ------------------------------------------");
        typeOutput.push(" *  Autogenerated by ⛋ Terrazzo. DO NOT EDIT!");
        typeOutput.push(" * ------------------------------------------- */");
        typeOutput.push("");

        // 导出基础 tokens 类型
        typeOutput.push("export declare const tokens: {");
        for (const tokenId of Object.keys(groupedTokens)) {
          typeOutput.push(`  "${tokenId}": {`);
          typeOutput.push(`    ".": {`);
          typeOutput.push(`      colorSpace: string;`);
          typeOutput.push(`      components: [number, number, number];`);
          typeOutput.push(`      alpha: number;`);
          typeOutput.push(`      hex?: string;`);
          typeOutput.push(`    };`);
          typeOutput.push(`    light: {`);
          typeOutput.push(`      colorSpace: string;`);
          typeOutput.push(`      components: [number, number, number];`);
          typeOutput.push(`      alpha: number;`);
          typeOutput.push(`      hex?: string;`);
          typeOutput.push(`    };`);
          typeOutput.push(`    dark: {`);
          typeOutput.push(`      colorSpace: string;`);
          typeOutput.push(`      components: [number, number, number];`);
          typeOutput.push(`      alpha: number;`);
          typeOutput.push(`      hex?: string;`);
          typeOutput.push(`    };`);
          typeOutput.push(`  };`);
        }
        typeOutput.push("};");
        typeOutput.push("");

        // 生成 ColorPath 类型 - 所有可用颜色路径的联合类型
        const colorPaths = Object.keys(groupedTokens)
          .filter((key) => key.startsWith("color."))
          .map((key) => `"${key.replace("color.", "")}"`)
          .sort();

        typeOutput.push("/** 所有可用的颜色路径（自动生成） */");
        typeOutput.push("export type ColorPath =");
        const pathChunks = [];
        for (let i = 0; i < colorPaths.length; i += 5) {
          pathChunks.push("  | " + colorPaths.slice(i, i + 5).join(" | "));
        }
        typeOutput.push(pathChunks.join("\n"));
        typeOutput.push(";");
        typeOutput.push("");

        // 透明度类型
        typeOutput.push("/** 透明度值 (0-1) */");
        typeOutput.push("export type ColorAlpha = number;");
        typeOutput.push("");

        // 主题模式类型
        typeOutput.push("/** 主题模式 */");
        typeOutput.push('export type ColorMode = "." | "light" | "dark";');
        typeOutput.push("");

        // token 函数类型
        typeOutput.push("/** Get individual token */");
        typeOutput.push(
          "export declare function token(tokenID: string, modeName?: ColorMode): any;"
        );
        typeOutput.push("");

        // color helper 函数类型
        typeOutput.push("/**");
        typeOutput.push(
          " * 颜色辅助函数 - 返回包装在 rgba() 中的 CSS 变量，考虑 token 自带的透明度"
        );
        typeOutput.push(" *");
        typeOutput.push(" * @param path - 颜色 token 路径");
        typeOutput.push(
          " * @param alpha - 可选的透明度值 (0-1)，会覆盖 token 自带的 alpha"
        );
        typeOutput.push(" * @param mode - 可选的主题模式");
        typeOutput.push(
          " * @returns CSS 颜色值，格式为 rgba(var(--cdt-color-xxx), alpha)"
        );
        typeOutput.push(" */");
        typeOutput.push("export declare function color(");
        typeOutput.push("  path: ColorPath,");
        typeOutput.push("  alpha?: ColorAlpha,");
        typeOutput.push("  mode?: ColorMode");
        typeOutput.push("): string;");
        typeOutput.push("");

        // 其他颜色 helper 函数类型
        typeOutput.push("/** 获取原始颜色 CSS 变量 */");
        typeOutput.push(
          "export declare function colorVar(path: ColorPath): string;"
        );
        typeOutput.push("");

        typeOutput.push("/** 获取颜色的十六进制值 */");
        typeOutput.push(
          "export declare function colorHex(path: ColorPath, mode?: ColorMode): string;"
        );
        typeOutput.push("");

        typeOutput.push("/** 获取颜色的 RGB 数值数组 */");
        typeOutput.push("export declare function colorRgb(");
        typeOutput.push("  path: ColorPath,");
        typeOutput.push("  mode?: ColorMode");
        typeOutput.push("): [number, number, number];");
        typeOutput.push("");

        typeOutput.push("/** 检查颜色 token 是否存在 */");
        typeOutput.push("export declare function hasColor(");
        typeOutput.push("  path: ColorPath,");
        typeOutput.push("  mode?: ColorMode");
        typeOutput.push("): boolean;");
        typeOutput.push("");

        typeOutput.push("/** 获取所有可用的颜色路径 */");
        typeOutput.push(
          "export declare function getAllAvailableColors(): ColorPath[];"
        );
        typeOutput.push("");

        // Spacing helper 函数类型
        typeOutput.push(
          "// ============================================================================"
        );
        typeOutput.push("// Spacing Helper Functions Types");
        typeOutput.push(
          "// ============================================================================"
        );
        typeOutput.push("");

        typeOutput.push("/** 分数字符串类型 */");
        typeOutput.push("export type FractionString = `${number}/${number}`;");
        typeOutput.push("");

        typeOutput.push("/** 任意值类型 */");
        typeOutput.push("export type ArbitraryValue = `[${string}]`;");
        typeOutput.push("");

        typeOutput.push("/** 间距值类型 */");
        typeOutput.push(
          'export type SpacingValue = number | FractionString | ArbitraryValue | "px" | BreakpointKey;'
        );
        typeOutput.push("");

        typeOutput.push("/** 获取间距值 */");
        typeOutput.push(
          "export declare function spacing(size: SpacingValue): string;"
        );
        typeOutput.push("");

        typeOutput.push("/** 批量获取间距值 */");
        typeOutput.push(
          "export declare function spacingList(sizes: SpacingValue[]): string;"
        );
        typeOutput.push("");

        typeOutput.push("/** 检查是否为有效的间距值 */");
        typeOutput.push(
          "export declare function spacingExists(size: unknown): boolean;"
        );
        typeOutput.push("");

        // Radius helper 函数类型
        typeOutput.push(
          "// ============================================================================"
        );
        typeOutput.push("// Radius Helper Functions Types");
        typeOutput.push(
          "// ============================================================================"
        );
        typeOutput.push("");

        typeOutput.push("/** 圆角键类型 */");
        typeOutput.push('export type RadiusKey = "sm" | "md" | "lg";');
        typeOutput.push("");

        typeOutput.push("/** 获取圆角值 */");
        typeOutput.push(
          "export declare function radius(name: RadiusKey, mode?: string): string;"
        );
        typeOutput.push("");

        typeOutput.push("/** 批量获取多个圆角值 */");
        typeOutput.push(
          "export declare function radiusList(...names: RadiusKey[]): string[];"
        );
        typeOutput.push("");

        // Shadows helper 函数类型
        typeOutput.push(
          "// ============================================================================"
        );
        typeOutput.push("// Shadow Helper Functions Types");
        typeOutput.push(
          "// ============================================================================"
        );
        typeOutput.push("");

        typeOutput.push("/** 阴影键类型 */");
        typeOutput.push(
          'export type ShadowKey = "border-default" | "border-default-inset" | "focus" | "lg" | "line" | "md" | "sm" | "xl" | "xs" | "xxs";'
        );
        typeOutput.push("");

        typeOutput.push("/** 获取阴影样式 */");
        typeOutput.push(
          "export declare function shadow(name: ShadowKey, mode?: string): string;"
        );
        typeOutput.push("");

        typeOutput.push("/** 批量获取多个阴影样式 */");
        typeOutput.push(
          "export declare function shadowList(...names: ShadowKey[]): string[];"
        );
        typeOutput.push("");

        // ZIndex helper 函数类型
        typeOutput.push(
          "// ============================================================================"
        );
        typeOutput.push("// Z-Index Helper Functions Types");
        typeOutput.push(
          "// ============================================================================"
        );
        typeOutput.push("");

        typeOutput.push("/** Z-Index 键类型 */");
        typeOutput.push(
          'export type ZIndexKey = "sticky" | "fixed" | "backdrop" | "modals" | "popover" | "menu" | "tooltip" | "notification" | "scroll-bar";'
        );
        typeOutput.push("");

        typeOutput.push("/** 获取 z-index CSS 变量 */");
        typeOutput.push(
          "export declare function zIndex(name: ZIndexKey, mode?: string): string;"
        );
        typeOutput.push("");

        typeOutput.push("/** 获取 z-index 的原始数值 */");
        typeOutput.push(
          "export declare function zIndexValue(name: ZIndexKey, mode?: string): number;"
        );
        typeOutput.push("");

        typeOutput.push("/** 批量获取多个 z-index CSS 变量 */");
        typeOutput.push(
          "export declare function zIndexList(...names: ZIndexKey[]): string[];"
        );
        typeOutput.push("");

        // Typography helper 函数类型
        typeOutput.push(
          "// ============================================================================"
        );
        typeOutput.push("// Typography Helper Functions Types");
        typeOutput.push(
          "// ============================================================================"
        );
        typeOutput.push("");

        typeOutput.push("/** Typography 预设键类型 */");
        typeOutput.push(
          'export type TypographyKey = "body.large" | "body.large-strong" | "body.medium" | "body.medium-strong" | "body.small" | "body.small-strong" | "heading.display" | "heading.large" | "heading.medium" | "heading.small";'
        );
        typeOutput.push("");

        typeOutput.push("/** 字体族键类型 */");
        typeOutput.push(
          'export type FontFamilyKey = "default" | "display" | "mono";'
        );
        typeOutput.push("");

        typeOutput.push("/** 字体重量键类型 */");
        typeOutput.push(
          'export type FontWeightKey = "light" | "default" | "medium" | "semibold" | "strong" | "heavy";'
        );
        typeOutput.push("");

        typeOutput.push("/** 字体大小键类型 */");
        typeOutput.push(
          'export type FontSizeKey = "xs" | "sm" | "md" | "lg" | "xl" | "2xl";'
        );
        typeOutput.push("");

        typeOutput.push("/** 行高键类型 */");
        typeOutput.push(
          'export type LineHeightKey = "tight" | "snug" | "normal" | "relaxed" | "loose" | "extra-loose";'
        );
        typeOutput.push("");

        typeOutput.push("/** 字符间距键类型 */");
        typeOutput.push(
          'export type LetterSpacingKey = "body-large" | "body-medium" | "body-small" | "body-small-strong" | "heading-large" | "heading-medium" | "heading-small" | "display";'
        );
        typeOutput.push("");

        typeOutput.push("/** Typography 样式对象类型 */");
        typeOutput.push("export type TypographyStylesObject = {");
        typeOutput.push("  fontFamily: string;");
        typeOutput.push("  fontSize: string;");
        typeOutput.push("  fontWeight: string;");
        typeOutput.push("  lineHeight: string;");
        typeOutput.push("  letterSpacing: string;");
        typeOutput.push("};");
        typeOutput.push("");

        typeOutput.push("/** 获取完整的 typography 预设样式 */");
        typeOutput.push("export declare function typography(");
        typeOutput.push("  name: TypographyKey,");
        typeOutput.push("  asVar?: boolean");
        typeOutput.push("): TypographyStylesObject;");
        typeOutput.push("");

        typeOutput.push("/** 获取 typography 预设的 CSS 字符串 */");
        typeOutput.push("export declare function typographyStyles(");
        typeOutput.push("  name: TypographyKey,");
        typeOutput.push("  asVar?: boolean");
        typeOutput.push("): string;");
        typeOutput.push("");

        typeOutput.push("/** 获取 typography 预设的样式对象 */");
        typeOutput.push("export declare function typographyStylesObject(");
        typeOutput.push("  name: TypographyKey,");
        typeOutput.push("  asVar?: boolean");
        typeOutput.push("): TypographyStylesObject;");
        typeOutput.push("");

        typeOutput.push("/** 获取字体族 */");
        typeOutput.push("export declare function fontFamily(");
        typeOutput.push("  name: FontFamilyKey,");
        typeOutput.push("  asVar?: boolean");
        typeOutput.push("): string;");
        typeOutput.push("");

        typeOutput.push("/** 获取字体重量 */");
        typeOutput.push("export declare function fontWeight(");
        typeOutput.push("  name: FontWeightKey,");
        typeOutput.push("  asVar?: boolean");
        typeOutput.push("): string;");
        typeOutput.push("");

        typeOutput.push("/** 获取字体大小 */");
        typeOutput.push("export declare function fontSize(");
        typeOutput.push("  name: FontSizeKey,");
        typeOutput.push("  asVar?: boolean");
        typeOutput.push("): string;");
        typeOutput.push("");

        typeOutput.push("/** 获取行高 */");
        typeOutput.push("export declare function lineHeight(");
        typeOutput.push("  name: LineHeightKey,");
        typeOutput.push("  asVar?: boolean");
        typeOutput.push("): string;");
        typeOutput.push("");

        typeOutput.push("/** 获取字符间距 */");
        typeOutput.push("export declare function letterSpacing(");
        typeOutput.push("  name: LetterSpacingKey,");
        typeOutput.push("  asVar?: boolean");
        typeOutput.push("): string;");
        typeOutput.push("");

        typeOutput.push("/** 列出所有可用的 typography presets */");
        typeOutput.push(
          "export declare function listTypographyPresets(): string[];"
        );
        typeOutput.push("");

        typeOutput.push("/** 检查 typography preset 是否存在 */");
        typeOutput.push(
          "export declare function typographyExists(name: string): boolean;"
        );
        typeOutput.push("");

        typeOutput.push("/** 获取 typography preset 的详细信息 */");
        typeOutput.push(
          "export declare function typographyInfo(name: string): {"
        );
        typeOutput.push("  name: string;");
        typeOutput.push("  description: string;");
        typeOutput.push("  value: TypographyStylesObject;");
        typeOutput.push("  resolved: TypographyStylesObject;");
        typeOutput.push("};");
        typeOutput.push("");

        // Breakpoints & Media Query helper 函数类型
        typeOutput.push(
          "// ============================================================================"
        );
        typeOutput.push("// Breakpoints & Media Query Helper Functions Types");
        typeOutput.push(
          "// ============================================================================"
        );
        typeOutput.push("");

        typeOutput.push("/** 断点键类型 */");
        typeOutput.push(
          'export type BreakpointKey = "xs" | "sm" | "md" | "lg" | "xl" | "2xl";'
        );
        typeOutput.push("");

        typeOutput.push("/** 媒体查询方向类型 */");
        typeOutput.push(
          'export type MediaQueryDirection = "up" | "down" | "only";'
        );
        typeOutput.push("");

        typeOutput.push("/** 单位类型 */");
        typeOutput.push('export type UnitType = "px" | "rem" | "number";');
        typeOutput.push("");

        typeOutput.push("/** 断点信息类型 */");
        typeOutput.push("export type BreakpointInfo = {");
        typeOutput.push("  name: string;");
        typeOutput.push("  px: string;");
        typeOutput.push("  rem: string;");
        typeOutput.push("  value: number;");
        typeOutput.push("  mediaQuery: {");
        typeOutput.push("    up: string;");
        typeOutput.push("    down: string;");
        typeOutput.push("    only: string;");
        typeOutput.push("  };");
        typeOutput.push("};");
        typeOutput.push("");

        typeOutput.push("/** 获取断点值 */");
        typeOutput.push("export declare function breakpoint(");
        typeOutput.push("  name: BreakpointKey,");
        typeOutput.push("  unit?: UnitType");
        typeOutput.push("): string | number;");
        typeOutput.push("");

        typeOutput.push("/** 获取容器最大宽度 */");
        typeOutput.push("export declare function container(");
        typeOutput.push("  breakpoint: BreakpointKey | number");
        typeOutput.push("): string;");
        typeOutput.push("");

        typeOutput.push("/** 生成 min-width 媒体查询 */");
        typeOutput.push("export declare function up(");
        typeOutput.push("  breakpoint: BreakpointKey | number,");
        typeOutput.push("  type?: string");
        typeOutput.push("): string;");
        typeOutput.push("");

        typeOutput.push("/** 生成 max-width 媒体查询 */");
        typeOutput.push("export declare function down(");
        typeOutput.push("  breakpoint: BreakpointKey | number,");
        typeOutput.push("  type?: string");
        typeOutput.push("): string;");
        typeOutput.push("");

        typeOutput.push("/** 生成范围媒体查询 (min-width 和 max-width) */");
        typeOutput.push("export declare function between(");
        typeOutput.push("  minBreakpoint: BreakpointKey | number,");
        typeOutput.push("  maxBreakpoint: BreakpointKey | number,");
        typeOutput.push("  type?: string");
        typeOutput.push("): string;");
        typeOutput.push("");

        typeOutput.push("/** 生成精确断点媒体查询 (只在特定断点范围内) */");
        typeOutput.push("export declare function only(");
        typeOutput.push("  breakpoint: BreakpointKey | number,");
        typeOutput.push("  type?: string");
        typeOutput.push("): string;");
        typeOutput.push("");

        typeOutput.push("/** 媒体查询选项类型 */");
        typeOutput.push("export type MediaQueryOptions = {");
        typeOutput.push("  type?: string;");
        typeOutput.push("  orientation?: 'portrait' | 'landscape';");
        typeOutput.push("  minWidth?: BreakpointKey | number;");
        typeOutput.push("  maxWidth?: BreakpointKey | number;");
        typeOutput.push("  minHeight?: number;");
        typeOutput.push("  maxHeight?: number;");
        typeOutput.push("};");
        typeOutput.push("");

        typeOutput.push("/** 生成自定义媒体查询 */");
        typeOutput.push("export declare function media(");
        typeOutput.push("  options: MediaQueryOptions");
        typeOutput.push("): string;");
        typeOutput.push("");

        typeOutput.push("/** 移动设备优先的媒体查询（xs 及以上） */");
        typeOutput.push("export declare function mobile(): string;");
        typeOutput.push("");

        typeOutput.push("/** 平板设备媒体查询（md 到 lg） */");
        typeOutput.push("export declare function tablet(): string;");
        typeOutput.push("");

        typeOutput.push("/** 桌面设备媒体查询（lg 及以上） */");
        typeOutput.push("export declare function desktop(): string;");
        typeOutput.push("");

        typeOutput.push("/** 打印媒体查询 */");
        typeOutput.push("export declare function print(): string;");
        typeOutput.push("");

        typeOutput.push("/** 获取断点信息（用于调试和文档） */");
        typeOutput.push("export declare function getBreakpointInfo(");
        typeOutput.push("  breakpoint: BreakpointKey | number");
        typeOutput.push("): {");
        typeOutput.push("  name: string;");
        typeOutput.push("  value: number;");
        typeOutput.push("  css: string;");
        typeOutput.push("  px: string;");
        typeOutput.push("  up: string;");
        typeOutput.push("  down: string;");
        typeOutput.push("  only: string;");
        typeOutput.push("};");
        typeOutput.push("");

        typeOutput.push("/** 检查断点是否存在 */");
        typeOutput.push(
          "export declare function breakpointExists(name: string): boolean;"
        );
        typeOutput.push("");

        typeOutput.push("/** 列出所有可用的断点 */");
        typeOutput.push("export declare function listBreakpoints(): {");
        typeOutput.push("  breakpoints: Array<{");
        typeOutput.push("    name: string;");
        typeOutput.push("    value: number;");
        typeOutput.push("    css: string;");
        typeOutput.push("    px: string;");
        typeOutput.push("  }>;");
        typeOutput.push("  aliases: Array<{");
        typeOutput.push("    alias: string;");
        typeOutput.push("    target: string;");
        typeOutput.push("  }>;");
        typeOutput.push("};");
        typeOutput.push("");

        typeOutput.push("/** 生成响应式工具类名映射 */");
        typeOutput.push("export declare function responsiveClasses(");
        typeOutput.push("  baseClassName: string");
        typeOutput.push("): Record<string, string>;");
        typeOutput.push("");

        outputFile("tokens.d.ts", typeOutput.join("\n"));
      } catch (error) {
        console.warn("[types-generator] 生成类型定义时出错:", error.message);
      }
    },
  };
}
