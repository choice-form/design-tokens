// ============================================================================
// 字体排版函数库
// ============================================================================

@use "sass:map";
@use "sass:meta";
@use "sass:list";
@use "sass:string";
@use "../tokens/typography" as typo-tokens;

/// 获取字体大小
/// @param {String} $name - 字体大小名称
/// @param {Boolean} $as-var - 是否返回 CSS 变量，默认 true
/// @return {String} 字体大小值或 CSS 变量
/// @example scss - 基本用法
///   .text {
///     font-size: font-size("md");
///   }
/// @example scss - 使用 CSS 变量
///   .text {
///     font-size: font-size("lg", true);
///   }
@function font-size($name, $as-var: true) {
  // 如果请求 CSS 变量，直接返回
  @if $as-var {
    @return var(--cdt-font-size-#{$name});
  }

  // 检查字体大小是否存在
  @if not map.has-key(typo-tokens.$font-sizes, $name) {
    @error "字体大小 '#{$name}' 不存在。可用的字体大小: #{map.keys(typo-tokens.$font-sizes)}";
  }

  // 获取字体大小值
  @return map.get(typo-tokens.$font-sizes, $name);
}

/// 获取字体族
/// @param {String} $name - 字体族名称
/// @param {Boolean} $as-var - 是否返回 CSS 变量，默认 true
/// @return {String} 字体族值或 CSS 变量
/// @example scss - 基本用法
///   .text {
///     font-family: font-family("en-us");
///   }
/// @example scss - 使用 CSS 变量
///   .code {
///     font-family: font-family("monospace", true);
///   }
@function font-family($name, $as-var: true) {
  // 如果请求 CSS 变量，直接返回
  @if $as-var {
    @return var(--cdt-font-family-#{$name});
  }

  // 检查字体族是否存在
  @if not map.has-key(typo-tokens.$font-families, $name) {
    @error "字体族 '#{$name}' 不存在。可用的字体族: #{map.keys(typo-tokens.$font-families)}";
  }

  // 获取字体族值
  $font-list: map.get(typo-tokens.$font-families, $name);
  @return _font-list-to-string($font-list);
}

/// 获取字体重量
/// @param {String} $name - 字体重量名称
/// @param {Boolean} $as-var - 是否返回 CSS 变量，默认 true
/// @return {String} 字体重量值或 CSS 变量
/// @example scss - 基本用法
///   .text {
///     font-weight: font-weight("medium");
///   }
/// @example scss - 使用 CSS 变量
///   .text {
///     font-weight: font-weight("bold", true);
///   }
@function font-weight($name, $as-var: true) {
  // 如果请求 CSS 变量，直接返回
  @if $as-var {
    @return var(--cdt-font-weight-#{$name});
  }

  // 检查字体重量是否存在
  @if not map.has-key(typo-tokens.$font-weights, $name) {
    @error "字体重量 '#{$name}' 不存在。可用的字体重量: #{map.keys(typo-tokens.$font-weights)}";
  }

  // 获取字体重量值
  @return map.get(typo-tokens.$font-weights, $name);
}

/// 获取行高
/// @param {String} $name - 行高名称
/// @param {Boolean} $as-var - 是否返回 CSS 变量，默认 true
/// @return {String} 行高值或 CSS 变量
/// @example scss - 基本用法
///   .text {
///     line-height: line-height("md");
///   }
/// @example scss - 使用 CSS 变量
///   .text {
///     line-height: line-height("relaxed", true);
///   }
@function line-height($name, $as-var: true) {
  // 如果请求 CSS 变量，直接返回
  @if $as-var {
    @return var(--cdt-line-height-#{$name});
  }

  // 检查行高是否存在
  @if not map.has-key(typo-tokens.$line-heights, $name) {
    @error "行高 '#{$name}' 不存在。可用的行高: #{map.keys(typo-tokens.$line-heights)}";
  }

  // 获取行高值
  @return map.get(typo-tokens.$line-heights, $name);
}

/// 获取字符间距
/// @param {String} $name - 字符间距名称
/// @param {Boolean} $as-var - 是否返回 CSS 变量，默认 true
/// @return {String} 字符间距值或 CSS 变量
/// @example scss - 基本用法
///   .text {
///     letter-spacing: letter-spacing("md");
///   }
/// @example scss - 使用 CSS 变量
///   .text {
///     letter-spacing: letter-spacing("wide", true);
///   }
@function letter-spacing($name, $as-var: true) {
  // 如果请求 CSS 变量，直接返回
  @if $as-var {
    @return var(--cdt-letter-spacing-#{$name});
  }

  // 检查字符间距是否存在
  @if not map.has-key(typo-tokens.$letter-spacings, $name) {
    @error "字符间距 '#{$name}' 不存在。可用的字符间距: #{map.keys(typo-tokens.$letter-spacings)}";
  }

  // 获取字符间距值
  @return map.get(typo-tokens.$letter-spacings, $name);
}

/// 复合字体属性设置
/// @param {String} $size - 字体大小名称
/// @param {String} $family - 字体族名称，可选
/// @param {String} $weight - 字体重量名称，可选
/// @param {String} $line-height - 行高名称，可选
/// @param {String} $letter-spacing - 字符间距名称，可选
/// @param {Boolean} $as-var - 是否使用 CSS 变量，默认 true
/// @return {Map} 字体属性映射
/// @example scss - 基本用法
///   .text {
///     @include font("md", "en-us", "medium");
///   }
/// @example scss - 完整用法
///   .heading {
///     @include font("xl", "en-us", "medium", "lg", "sm");
///   }
@mixin font(
  $size,
  $family: null,
  $weight: null,
  $line-height-val: null,
  $letter-spacing-val: null,
  $as-var: true
) {
  font-size: font-size($size, $as-var);

  @if $family {
    font-family: font-family($family, $as-var);
  }

  @if $weight {
    font-weight: font-weight($weight, $as-var);
  }

  @if $line-height-val {
    line-height: line-height($line-height-val, $as-var);
  }

  @if $letter-spacing-val {
    letter-spacing: letter-spacing($letter-spacing-val, $as-var);
  }
}

/// 文本样式预设
/// @param {String} $preset - 预设名称 (caption|body|subtitle|title|heading)
/// @param {Boolean} $as-var - 是否使用 CSS 变量，默认 true
/// @example scss - 使用预设
///   .caption {
///     @include text("caption");
///   }
///   .title {
///     @include text("title");
///   }
@mixin text($preset, $as-var: true) {
  @if $preset == "caption" {
    @include font("sm", "en-us", "base", "sm", "sm", $as-var);
  } @else if $preset == "body" {
    @include font("md", "en-us", "base", "md", "md", $as-var);
  } @else if $preset == "subtitle" {
    @include font("lg", "en-us", "medium", "md", "lg", $as-var);
  } @else if $preset == "title" or $preset == "heading" {
    @include font("xl", "en-us", "medium", "lg", "lg", $as-var);
  } @else {
    @error "未知的文本预设 '#{$preset}'。可用预设: caption, body, subtitle, title, heading";
  }
}

// ============================================================================
// 私有辅助函数
// ============================================================================

/// 将字体列表转换为字符串
/// @param {List} $font-list - 字体列表
/// @return {String} 字体字符串
/// @access private
@function _font-list-to-string($font-list) {
  $result: "";
  $separator: ", ";

  @for $i from 1 through list.length($font-list) {
    $font: list.nth($font-list, $i);

    // 处理包含空格的字体名称，需要加引号
    @if string.index(#{$font}, " ") and not string.index(#{$font}, '"') {
      $font: '"#{$font}"';
    }

    @if $i == 1 {
      $result: #{$font};
    } @else {
      $result: #{$result}#{$separator}#{$font};
    }
  }

  @return $result;
}
