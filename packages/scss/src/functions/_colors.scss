@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use "sass:list";
@use "../tokens/colors" as color-tokens;
@use "../css-variables/config" as css-vars;

// ============================================================================
// 颜色工具函数
// ============================================================================

/// 获取颜色值
/// @param {String} $name - 颜色名称，支持基础色、语义色和短别名
/// @param {Number} $alpha - 透明度，默认为1
/// @return {Color} 完整的 rgba 颜色值
/// @example scss - 使用示例
///   .button {
///     background: color("blue-500");            // rgba(13, 153, 255, 1)
///     color: color("fg-default", 0.8);          // rgba(0, 0, 0, 0.8)
///     border: color("bd-strong", 0.3);          // rgba(68, 68, 68, 0.3)
///   }
@function color($name, $alpha: 1) {
  // 处理短别名
  $resolved-name: _resolve-color-alias($name);

  // 验证颜色是否存在
  @if not _color-exists($resolved-name) {
    @error "颜色 '#{$name}' 不存在。\A可用颜色包括:\A基础色: #{_list-base-colors()}\A语义色: #{_list-semantic-colors()}\A短别名: #{_list-color-aliases()}";
  }

  // 处理默认透明度
  @if $alpha == 1 and map.has-key(color-tokens.$default-alpha, $resolved-name) {
    $alpha: map.get(color-tokens.$default-alpha, $resolved-name);
  }

  // 生成 rgba 函数调用 - 使用带前缀的变量
  @return rgba(var(--#{css-vars.$css-var-prefix}#{$resolved-name}), #{$alpha});
}

/// 批量获取颜色值（用于渐变等场景）
/// @param {List} $colors - 颜色名称列表，可选择性包含透明度
/// @return {List} 颜色值列表
/// @example scss - 使用示例
///   .gradient {
///     background: linear-gradient(
///       to right,
///       color-list("blue-500", "purple-500", "pink-500")...
///     );
///   }
@function color-list($colors...) {
  $result: ();

  @each $color-def in $colors {
    @if meta.type-of($color-def) == list {
      // 处理 ("blue-500", 0.8) 格式
      $name: list.nth($color-def, 1);
      $alpha: if(list.length($color-def) > 1, list.nth($color-def, 2), 1);
      $result: list.append($result, color($name, $alpha));
    } @else {
      // 处理简单字符串格式
      $result: list.append($result, color($color-def));
    }
  }

  @return $result;
}

// ============================================================================
// 辅助函数
// ============================================================================

/// 解析颜色别名
/// @param {String} $name - 颜色名称
/// @return {String} 解析后的真实颜色名称
/// @access private
@function _resolve-color-alias($name) {
  @if map.has-key(color-tokens.$color-aliases, $name) {
    @return map.get(color-tokens.$color-aliases, $name);
  }
  @return $name;
}

/// 检查颜色是否存在
/// @param {String} $name - 颜色名称
/// @return {Boolean} 是否存在
/// @access private
@function _color-exists($name) {
  // 检查基础颜色 (light theme)
  @if map.has-key(color-tokens.$base-colors-light, $name) {
    @return true;
  }

  // 检查基础颜色 (dark theme) - 主要用于验证
  @if map.has-key(color-tokens.$base-colors-dark, $name) {
    @return true;
  }

  // 检查语义颜色（light theme）
  @if map.has-key(color-tokens.$semantic-colors-light, $name) {
    @return true;
  }

  // 检查语义颜色（dark theme）
  @if map.has-key(color-tokens.$semantic-colors-dark, $name) {
    @return true;
  }

  // 检查扩展语义颜色
  @if map.has-key(color-tokens.$extended-semantic-colors, $name) {
    @return true;
  }

  @return false;
}

/// 列出所有基础颜色
/// @return {List} 基础颜色名称列表
/// @access private
@function _list-base-colors() {
  // 使用 light theme 的基础颜色作为参考（两个主题的键是相同的）
  @return map.keys(color-tokens.$base-colors-light);
}

/// 列出所有语义颜色
/// @return {List} 语义颜色名称列表
/// @access private
@function _list-semantic-colors() {
  $light-colors: map.keys(color-tokens.$semantic-colors-light);
  $dark-colors: map.keys(color-tokens.$semantic-colors-dark);
  $extended-colors: map.keys(color-tokens.$extended-semantic-colors);

  // 合并并去重
  $all-colors: $light-colors;
  @each $color in $dark-colors {
    @if not list.index($all-colors, $color) {
      $all-colors: list.append($all-colors, $color);
    }
  }
  @each $color in $extended-colors {
    @if not list.index($all-colors, $color) {
      $all-colors: list.append($all-colors, $color);
    }
  }

  @return $all-colors;
}

/// 列出所有颜色别名
/// @return {List} 颜色别名列表
/// @access private
@function _list-color-aliases() {
  @return map.keys(color-tokens.$color-aliases);
}

/// 获取颜色的RGB值（用于调试和演示）
/// @param {String} $name - 颜色名称
/// @param {String} $theme - 主题 ("light" 或 "dark")，默认为 "light"
/// @return {String} RGB值描述
/// @example scss - 使用示例
///   @debug color-to-rgb("blue-500");            // "13, 153, 255" (light theme)
///   @debug color-to-rgb("blue-500", "dark");    // "12, 140, 233" (dark theme)
///   @debug color-to-rgb("fg-default", "light"); // "0, 0, 0"
@function color-to-rgb($name, $theme: "light") {
  $resolved-name: _resolve-color-alias($name);

  @if not _color-exists($resolved-name) {
    @return "颜色不存在";
  }

  // 选择正确的颜色集合
  $base-colors: if(
    $theme == "dark",
    color-tokens.$base-colors-dark,
    color-tokens.$base-colors-light
  );
  $semantic-colors: if(
    $theme == "dark",
    color-tokens.$semantic-colors-dark,
    color-tokens.$semantic-colors-light
  );

  // 检查基础颜色
  @if map.has-key($base-colors, $resolved-name) {
    $rgb: map.get($base-colors, $resolved-name);
    @return "#{list.nth($rgb, 1)}, #{list.nth($rgb, 2)}, #{list.nth($rgb, 3)}";
  }

  // 检查语义颜色
  @if map.has-key($semantic-colors, $resolved-name) {
    $value: map.get($semantic-colors, $resolved-name);
    @if meta.type-of($value) == string {
      @return color-to-rgb($value, $theme); // 递归解析引用
    } @else if meta.type-of($value) == list {
      @return "#{list.nth($value, 1)}, #{list.nth($value, 2)}, #{list.nth($value, 3)}";
    }
  }

  // 检查扩展语义颜色
  @if map.has-key(color-tokens.$extended-semantic-colors, $resolved-name) {
    $value: map.get(color-tokens.$extended-semantic-colors, $resolved-name);
    @if meta.type-of($value) == string {
      @return color-to-rgb($value, $theme); // 递归解析引用
    } @else if meta.type-of($value) == list {
      @return "#{list.nth($value, 1)}, #{list.nth($value, 2)}, #{list.nth($value, 3)}";
    }
  }

  @return "无法解析";
}
