// ============================================================================
// Flex 布局 Mixins
// ============================================================================

@use "sass:meta";
@use "sass:math";
@use "../functions" as fn;

/// 基础 flex 容器
/// @param {String} $direction - flex 方向 (row, column, row-reverse, column-reverse)
/// @param {String} $justify - 主轴对齐 (flex-start, center, flex-end, space-between, space-around, space-evenly)
/// @param {String} $align - 交叉轴对齐 (stretch, flex-start, center, flex-end, baseline)
/// @param {String} $wrap - 换行控制 (nowrap, wrap, wrap-reverse)
/// @param {String|Number} $gap - 间距，支持 spacing token
/// @example scss - 使用示例
///   .container {
///     @include flex;  // 默认 flex 容器
///   }
///   .grid {
///     @include flex(row, space-between, center, wrap, 4);
///   }
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap, $gap: null) {
  display: flex;
  flex-direction: $direction;
  flex-wrap: $wrap;
  justify-content: $justify;
  align-items: $align;

  @if $gap {
    @if meta.type-of($gap) == number and math.is-unitless($gap) {
      gap: fn.spacing($gap);
    } @else {
      gap: $gap;
    }
  }
}

/// Flex 居中布局
/// @param {String} $direction - flex 方向，默认 row
/// @param {String|Number} $gap - 间距，支持 spacing token
/// @example scss - 使用示例
///   .center-box {
///     @include flex-center;
///   }
///   .center-column {
///     @include flex-center(column, 4);
///   }
@mixin flex-center($direction: row, $gap: null) {
  @include flex($direction, center, center, nowrap, $gap);
}

/// Flex 水平分布布局
/// @param {String} $align - 交叉轴对齐，默认 center
/// @param {String|Number} $gap - 间距，支持 spacing token
/// @example scss - 使用示例
///   .navbar {
///     @include flex-between;
///   }
///   .header {
///     @include flex-between(center, 4);
///   }
@mixin flex-between($align: center, $gap: null) {
  @include flex(row, space-between, $align, nowrap, $gap);
}

/// Flex 水平居中分布
/// @param {String} $align - 交叉轴对齐，默认 center
/// @param {String|Number} $gap - 间距，支持 spacing token
/// @example scss - 使用示例
///   .button-group {
///     @include flex-around;
///   }
@mixin flex-around($align: center, $gap: null) {
  @include flex(row, space-around, $align, nowrap, $gap);
}

/// Flex 均匀分布
/// @param {String} $align - 交叉轴对齐，默认 center
/// @param {String|Number} $gap - 间距，支持 spacing token
/// @example scss - 使用示例
///   .menu {
///     @include flex-evenly;
///   }
@mixin flex-evenly($align: center, $gap: null) {
  @include flex(row, space-evenly, $align, nowrap, $gap);
}

/// 垂直栈布局
/// @param {String} $align - 主轴对齐，默认 stretch
/// @param {String|Number} $gap - 间距，支持 spacing token
/// @example scss - 使用示例
///   .stack {
///     @include flex-stack;
///   }
///   .form {
///     @include flex-stack(stretch, 4);
///   }
@mixin flex-stack($align: stretch, $gap: null) {
  @include flex(column, flex-start, $align, nowrap, $gap);
}

/// 垂直居中栈布局
/// @param {String} $align - 交叉轴对齐，默认 center
/// @param {String|Number} $gap - 间距，支持 spacing token
/// @example scss - 使用示例
///   .centered-stack {
///     @include flex-stack-center;
///   }
@mixin flex-stack-center($align: center, $gap: null) {
  @include flex(column, center, $align, nowrap, $gap);
}

/// Flex 网格布局（支持换行）
/// @param {String} $justify - 主轴对齐，默认 flex-start
/// @param {String} $align - 交叉轴对齐，默认 stretch
/// @param {String|Number} $gap - 间距，支持 spacing token
/// @example scss - 使用示例
///   .card-grid {
///     @include flex-grid(center, stretch, 4);
///   }
@mixin flex-grid($justify: flex-start, $align: stretch, $gap: null) {
  @include flex(row, $justify, $align, wrap, $gap);
}

/// Flex 子项控制
/// @param {Number} $grow - flex-grow 值，默认 0
/// @param {Number} $shrink - flex-shrink 值，默认 1
/// @param {String} $basis - flex-basis 值，默认 auto
/// @example scss - 使用示例
///   .sidebar {
///     @include flex-item(0, 0, 200px);  // 固定宽度
///   }
///   .content {
///     @include flex-item(1);  // 填充剩余空间
///   }
@mixin flex-item($grow: 0, $shrink: 1, $basis: auto) {
  flex: $grow $shrink $basis;
}

/// Flex 填充项（占据剩余空间）
/// @example scss - 使用示例
///   .main-content {
///     @include flex-fill;
///   }
@mixin flex-fill {
  @include flex-item(1, 1, 0%);
}

/// Flex 固定项（不伸缩）
/// @param {String} $basis - 基础大小，默认 auto
/// @example scss - 使用示例
///   .sidebar {
///     @include flex-fixed(200px);
///   }
@mixin flex-fixed($basis: auto) {
  @include flex-item(0, 0, $basis);
}

/// Flex 自适应项（可缩小但不放大）
/// @example scss - 使用示例
///   .button {
///     @include flex-shrink;
///   }
@mixin flex-shrink {
  @include flex-item(0, 1, auto);
}

/// Flex 间距控制
/// @param {String|Number} $gap - 间距值，支持 spacing token
/// @param {String|Number} $row-gap - 行间距，可选
/// @param {String|Number} $column-gap - 列间距，可选
/// @example scss - 使用示例
///   .flex-container {
///     @include flex;
///     @include flex-gap(4);
///   }
///   .grid-container {
///     @include flex;
///     @include flex-gap(null, 4, 6);  // 行间距4，列间距6
///   }
@mixin flex-gap($gap: null, $row-gap: null, $column-gap: null) {
  @if $gap {
    @if meta.type-of($gap) == number and math.is-unitless($gap) {
      gap: fn.spacing($gap);
    } @else {
      gap: $gap;
    }
  }

  @if $row-gap {
    @if meta.type-of($row-gap) == number and math.is-unitless($row-gap) {
      row-gap: fn.spacing($row-gap);
    } @else {
      row-gap: $row-gap;
    }
  }

  @if $column-gap {
    @if meta.type-of($column-gap) == number and math.is-unitless($column-gap) {
      column-gap: fn.spacing($column-gap);
    } @else {
      column-gap: $column-gap;
    }
  }
}
