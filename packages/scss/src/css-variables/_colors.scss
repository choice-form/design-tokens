// ============================================================================
// 颜色 CSS 变量生成器
// ============================================================================

@use "sass:map";
@use "sass:meta";
@use "sass:list";
@use "config";

/// 生成颜色CSS变量的辅助函数
/// @param {Map} $colors - 颜色映射
/// @param {Map} $semantic-colors - 语义颜色映射
/// @param {Map} $additional-colors - 额外的颜色映射（可选）
/// @access private
@mixin generate-color-variables($colors, $semantic-colors, $additional-colors: ()) {
  // 合并所有颜色映射，用于引用解析
  $all-colors: map.merge($colors, $semantic-colors);
  @if list.length($additional-colors) > 0 {
    $all-colors: map.merge($all-colors, $additional-colors);
  }

  // 生成基础颜色变量（纯RGB值）
  @each $name, $rgb in $colors {
    @if meta.type-of($rgb) == list and list.length($rgb) == 3 {
      --#{config.$css-var-prefix}#{$name}:
        #{list.nth($rgb, 1)}, #{list.nth($rgb, 2)}, #{list.nth($rgb, 3)};
    }
  }

  // 生成语义颜色变量
  @each $name, $value in $semantic-colors {
    @if meta.type-of($value) == string {
      // 引用类型的语义颜色（如 "white", "gray-100", "foreground-default"）
      @if map.has-key($all-colors, $value) {
        $rgb: map.get($all-colors, $value);
        @if meta.type-of($rgb) == list and list.length($rgb) == 3 {
          --#{config.$css-var-prefix}#{$name}:
            #{list.nth($rgb, 1)}, #{list.nth($rgb, 2)}, #{list.nth($rgb, 3)};
        }
      }
    } @else if meta.type-of($value) == list and list.length($value) == 3 {
      // 检查是否是需要特殊透明度处理的颜色
      @if $name == "on-accent-secondary-foreground" {
        // rgba(255, 255, 255, 0.8)
        --#{config.$css-var-prefix}#{$name}: rgba(
          #{list.nth($value, 1)},
          #{list.nth($value, 2)},
          #{list.nth($value, 3)},
          0.8
        );
      } @else if $name == "on-accent-tertiary-foreground" {
        // rgba(255, 255, 255, 0.4)
        --#{config.$css-var-prefix}#{$name}: rgba(
          #{list.nth($value, 1)},
          #{list.nth($value, 2)},
          #{list.nth($value, 3)},
          0.4
        );
      } @else {
        // 直接定义的语义颜色
        --#{config.$css-var-prefix}#{$name}:
          #{list.nth($value, 1)}, #{list.nth($value, 2)}, #{list.nth($value, 3)};
      }
    }
  }

  // 生成额外颜色变量（如扩展语义颜色）
  @each $name, $value in $additional-colors {
    @if meta.type-of($value) == string {
      // 引用类型的语义颜色（如 "white", "gray-100", "foreground-default"）
      @if map.has-key($all-colors, $value) {
        $rgb: map.get($all-colors, $value);
        @if meta.type-of($rgb) == list and list.length($rgb) == 3 {
          --#{config.$css-var-prefix}#{$name}:
            #{list.nth($rgb, 1)}, #{list.nth($rgb, 2)}, #{list.nth($rgb, 3)};
        }
      }
    } @else if meta.type-of($value) == list and list.length($value) == 3 {
      // 检查是否是需要特殊透明度处理的颜色
      @if $name == "on-accent-secondary-foreground" {
        // rgba(255, 255, 255, 0.8)
        --#{config.$css-var-prefix}#{$name}: rgba(
          #{list.nth($value, 1)},
          #{list.nth($value, 2)},
          #{list.nth($value, 3)},
          0.8
        );
      } @else if $name == "on-accent-tertiary-foreground" {
        // rgba(255, 255, 255, 0.4)
        --#{config.$css-var-prefix}#{$name}: rgba(
          #{list.nth($value, 1)},
          #{list.nth($value, 2)},
          #{list.nth($value, 3)},
          0.4
        );
      } @else {
        // 直接定义的语义颜色
        --#{config.$css-var-prefix}#{$name}:
          #{list.nth($value, 1)}, #{list.nth($value, 2)}, #{list.nth($value, 3)};
      }
    }
  }
}
