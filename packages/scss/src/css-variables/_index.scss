// ============================================================================
// CSS 变量生成器主入口
// ============================================================================

@use "config";
@use "spacing";
@use "colors";
@use "shadows";
@use "typography";
@use "zindex";
@use "radius";
@use "breakpoints";

@use "../tokens/colors" as color-tokens;
@use "../tokens/shadows" as shadow-tokens;
@use "../tokens/typography" as typo-tokens;
@use "../tokens/zindex" as zindex-tokens;
@use "../tokens/radius" as radius-tokens;

/// 生成所有CSS自定义属性
/// @param {String} $theme - 主题名称，默认为 'default'
/// @content 允许添加额外的自定义属性
@mixin css-variables($theme: "default") {
  :root {
    // ========================================
    // Base Variables - 添加前缀避免冲突
    // ========================================
    @include spacing.generate-spacing-variables();

    // ========================================
    // Breakpoint Variables - Tailwind 风格断点
    // ========================================
    @include breakpoints.generate-breakpoint-variables();

    // ========================================
    // Color Variables - Light Theme (Default)
    // 包括基础色、语义色和扩展语义色
    // ========================================
    @include colors.generate-color-variables(
      color-tokens.$base-colors-light,
      color-tokens.$semantic-colors-light,
      color-tokens.$extended-semantic-colors
    );

    // ========================================
    // Shadow Variables - Light Theme (Default)
    // 包括基础阴影、语义阴影和特殊阴影
    // ========================================
    @include shadows.generate-shadow-variables(
      shadow-tokens.$shadows-light,
      shadow-tokens.$semantic-shadows,
      shadow-tokens.$hard-shadows
    );

    // ========================================
    // Typography Variables
    // 字体变量不区分主题，所有主题使用相同的字体设置
    // ========================================
    @include typography.generate-typography-variables(
      typo-tokens.$font-sizes,
      typo-tokens.$font-families,
      typo-tokens.$font-weights,
      typo-tokens.$line-heights,
      typo-tokens.$letter-spacings
    );

    // ========================================
    // Z-Index Variables
    // z-index 变量不区分主题，所有主题使用相同的层级设置
    // ========================================
    @include zindex.generate-zindex-variables(zindex-tokens.$zindex-values);

    // ========================================
    // Radius Variables
    // radius 变量不区分主题，所有主题使用相同的圆角设置
    // ========================================
    @include radius.generate-radius-variables(radius-tokens.$radius-values);

    // ========================================
    // 其他变量将在这里添加
    // ========================================

    @content;
  }

  // ========================================
  // Dark Theme Variables
  // ========================================
  .dark,
  [data-theme="dark"] {
    @include colors.generate-color-variables(
      color-tokens.$base-colors-dark,
      color-tokens.$semantic-colors-dark,
      color-tokens.$extended-semantic-colors
    );

    @include shadows.generate-shadow-variables(
      shadow-tokens.$shadows-dark,
      shadow-tokens.$semantic-shadows,
      shadow-tokens.$hard-shadows
    );

    // 字体变量在 Dark 主题中不需要重新定义，使用与 Light 主题相同的值
  }
}

/// 主题切换支持
/// @param {String} $theme - 主题名称
/// @param {String} $selector - 主题选择器，默认为 data 属性
/// @example scss - 使用示例
///   @include theme-variables('compact') {
///     --cdt-spacing: 0.2rem; // 紧凑主题使用更小的间距
///   }
///
///   @include theme-variables('spacious') {
///     --cdt-spacing: 0.3rem; // 宽松主题使用更大的间距
///   }
@mixin theme-variables($theme, $selector: '[data-theme="#{$theme}"]') {
  #{$selector} {
    @content;
  }
}
