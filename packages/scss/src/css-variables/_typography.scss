// ============================================================================
// 字体排版 CSS 变量生成器
// ============================================================================

@use "sass:map";
@use "sass:meta";
@use "sass:list";
@use "sass:string";
@use "config";

/// 生成字体CSS变量的辅助函数
/// @param {Map} $font-sizes - 字体大小映射
/// @param {Map} $font-families - 字体族映射
/// @param {Map} $font-weights - 字体重量映射
/// @param {Map} $line-heights - 行高映射
/// @param {Map} $letter-spacings - 字符间距映射
/// @param {Map} $semantic-font-sizes - 语义字体大小映射（可选）
/// @param {Map} $semantic-font-families - 语义字体族映射（可选）
/// @param {Map} $semantic-font-weights - 语义字体重量映射（可选）
/// @param {Map} $semantic-line-heights - 语义行高映射（可选）
/// @param {Map} $semantic-letter-spacings - 语义字符间距映射（可选）
/// @access private
@mixin generate-typography-variables(
  $font-sizes,
  $font-families,
  $font-weights,
  $line-heights,
  $letter-spacings,
  $semantic-font-sizes: (),
  $semantic-font-families: (),
  $semantic-font-weights: (),
  $semantic-line-heights: (),
  $semantic-letter-spacings: ()
) {
  // 生成字体大小变量
  @each $name, $size in $font-sizes {
    --#{config.$css-var-prefix}font-size-#{$name}: #{$size};
  }

  // 生成字体族变量
  @each $name, $family-list in $font-families {
    $family-string: _font-list-to-string($family-list);
    --#{config.$css-var-prefix}font-family-#{$name}: #{$family-string};
  }

  // 生成字体重量变量
  @each $name, $weight in $font-weights {
    --#{config.$css-var-prefix}font-weight-#{$name}: #{$weight};
  }

  // 生成行高变量
  @each $name, $height in $line-heights {
    --#{config.$css-var-prefix}line-height-#{$name}: #{$height};
  }

  // 生成字符间距变量
  @each $name, $spacing in $letter-spacings {
    --#{config.$css-var-prefix}letter-spacing-#{$name}: #{$spacing};
  }

  // 生成语义字体大小变量
  @each $name, $base-name in $semantic-font-sizes {
    @if map.has-key($font-sizes, $base-name) {
      $size: map.get($font-sizes, $base-name);
      --#{config.$css-var-prefix}font-size-#{$name}: #{$size};
    }
  }

  // 生成语义字体族变量
  @each $name, $base-name in $semantic-font-families {
    @if map.has-key($font-families, $base-name) {
      $family-list: map.get($font-families, $base-name);
      $family-string: _font-list-to-string($family-list);
      --#{config.$css-var-prefix}font-family-#{$name}: #{$family-string};
    }
  }

  // 生成语义字体重量变量
  @each $name, $base-name in $semantic-font-weights {
    @if map.has-key($font-weights, $base-name) {
      $weight: map.get($font-weights, $base-name);
      --#{config.$css-var-prefix}font-weight-#{$name}: #{$weight};
    }
  }

  // 生成语义行高变量
  @each $name, $base-name in $semantic-line-heights {
    @if map.has-key($line-heights, $base-name) {
      $height: map.get($line-heights, $base-name);
      --#{config.$css-var-prefix}line-height-#{$name}: #{$height};
    }
  }

  // 生成语义字符间距变量
  @each $name, $base-name in $semantic-letter-spacings {
    @if map.has-key($letter-spacings, $base-name) {
      $spacing: map.get($letter-spacings, $base-name);
      --#{config.$css-var-prefix}letter-spacing-#{$name}: #{$spacing};
    }
  }
}

/// 将字体列表转换为字符串的辅助函数（用于CSS变量生成）
/// @param {List} $font-list - 字体列表
/// @return {String} 字体字符串
/// @access private
@function _font-list-to-string($font-list) {
  $result: "";
  $separator: ", ";

  @for $i from 1 through list.length($font-list) {
    $font: list.nth($font-list, $i);

    // 处理包含空格的字体名称，需要加引号
    @if string.index(#{$font}, " ") and not string.index(#{$font}, '"') {
      $font: '"#{$font}"';
    }

    @if $i == 1 {
      $result: #{$font};
    } @else {
      $result: #{$result}#{$separator}#{$font};
    }
  }

  @return $result;
}
