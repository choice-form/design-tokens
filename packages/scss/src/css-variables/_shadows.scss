// ============================================================================
// 阴影 CSS 变量生成器
// ============================================================================

@use "sass:map";
@use "sass:meta";
@use "sass:list";
@use "config";

/// 生成阴影CSS变量的辅助函数
/// @param {Map} $shadows - 基础阴影映射
/// @param {Map} $semantic-shadows - 语义阴影映射（可选）
/// @param {Map} $hard-shadows - 特殊阴影映射（可选）
/// @access private
@mixin generate-shadow-variables($shadows, $semantic-shadows: (), $hard-shadows: ()) {
  // 生成基础阴影变量
  @each $name, $shadow-list in $shadows {
    --#{config.$css-var-prefix}shadow-#{$name}: #{_shadow-list-to-string($shadow-list)};
  }

  // 生成语义阴影变量（指向基础阴影）
  @each $name, $target in $semantic-shadows {
    @if map.has-key($shadows, $target) {
      $shadow-list: map.get($shadows, $target);
      --#{config.$css-var-prefix}shadow-#{$name}: #{_shadow-list-to-string($shadow-list)};
    } @else if map.has-key($hard-shadows, $target) {
      // 如果语义阴影指向特殊阴影
      $shadow-list: map.get($hard-shadows, $target);
      --#{config.$css-var-prefix}shadow-#{$name}: #{_shadow-list-to-string($shadow-list)};
    } @else {
      --#{config.$css-var-prefix}shadow-#{$name}: #{$target};
    }
  }

  // 生成特殊阴影变量
  @each $name, $shadow-value in $hard-shadows {
    @if meta.type-of($shadow-value) == "list" {
      --#{config.$css-var-prefix}shadow-#{$name}: #{_shadow-list-to-string($shadow-value)};
    } @else {
      --#{config.$css-var-prefix}shadow-#{$name}: #{$shadow-value};
    }
  }
}

/// 将阴影列表转换为字符串的辅助函数
/// @param {List} $shadow-list - 阴影列表
/// @return {String} 阴影字符串
/// @access private
@function _shadow-list-to-string($shadow-list) {
  $result: "";
  $separator: ", ";

  @for $i from 1 through list.length($shadow-list) {
    $shadow: list.nth($shadow-list, $i);
    @if $i == 1 {
      $result: #{$shadow};
    } @else {
      $result: #{$result}#{$separator}#{$shadow};
    }
  }

  @return $result;
}
